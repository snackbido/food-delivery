pipeline {
  agent any

  parameters {
    booleanParam(name: 'FORCE_ALL', defaultValue: false, description: 'Build t·∫•t c·∫£ service b·∫•t k·ªÉ c√≥ thay ƒë·ªïi hay kh√¥ng')
  }

  environment {
    CREDS = credentials('dockerhub-credentials')
    DOCKERHUB_USER = "${CREDS_USR}"
    TAG = ''
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Detect Git Tag & Changed Services') {
      steps {
        script {
          // 1. L·∫•y tag hi·ªán t·∫°i
          def tag = sh(script: "git describe --tags --exact-match || echo ''", returnStdout: true).trim()
          if (!tag) {
            error("‚õî Kh√¥ng ph·∫£i Git tag. D·ª´ng pipeline.")
          }
          env.TAG = tag
          echo "üè∑Ô∏è Git tag hi·ªán t·∫°i: ${tag}"

          // 2. N·∫øu FORCE_ALL = true ‚Üí build to√†n b·ªô service
          if (params.FORCE_ALL) {
            def allSvcs = sh(script: 'ls services', returnStdout: true).trim().split("\n")
            env.CHANGED_SERVICES = allSvcs.join(',')
            echo "üö® FORCE_ALL = true ‚Üí build t·∫•t c·∫£: ${env.CHANGED_SERVICES}"
            return
          }

          // 3. T√¨m Git tag tr∆∞·ªõc ƒë√≥
          def lastTag = sh(script: "git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo ''", returnStdout: true).trim()
          def changedSvcs = []

          if (lastTag) {
            echo "üîç So s√°nh v·ªõi tag tr∆∞·ªõc ƒë√≥: ${lastTag}"
            def diff = sh(script: "git diff --name-only ${lastTag}..HEAD", returnStdout: true).trim().split("\n")
            changedSvcs = diff.findAll { it.startsWith('services/') }
                              .collect { it.split('/')[1] }
                              .unique()
          } else {
            echo "üÜï Kh√¥ng t√¨m th·∫•y tag tr∆∞·ªõc ƒë√≥ ‚Üí l·∫ßn ƒë·∫ßu ch·∫°y. Build to√†n b·ªô service."
            changedSvcs = sh(script: 'ls services', returnStdout: true).trim().split("\n")
          }

          if (changedSvcs.isEmpty()) {
            echo "‚úÖ Kh√¥ng c√≥ service n√†o thay ƒë·ªïi. D·ª´ng pipeline."
            currentBuild.result = 'SUCCESS'
            error('Skip build')
          }

          env.CHANGED_SERVICES = changedSvcs.join(',')
          echo "üì¶ Danh s√°ch service s·∫Ω build: ${env.CHANGED_SERVICES}"
        }
      }
    }

    stage('Generate Compose File Cho Services Thay ƒê·ªïi') {
      steps {
        script {
          def svcs = env.CHANGED_SERVICES.split(',')
          def compose = ['version: "3.8"', '', 'services:']
          for (svc in svcs) {
            compose += """
  ${svc}:
    build: ./services/${svc}
    image: ${DOCKERHUB_USER}/${svc}:${TAG}
"""
          }
          writeFile file: 'docker-compose.partial.yml', text: compose.join('\n')
          sh 'cat docker-compose.partial.yml'
        }
      }
    }

    stage('Build & Push Docker Images') {
      steps {
        sh """
          echo $CREDS_PSW | docker login -u $DOCKERHUB_USER --password-stdin
          TAG=${TAG} docker-compose -f docker-compose.partial.yml build
          TAG=${TAG} docker-compose -f docker-compose.partial.yml push
          docker logout
        """
      }
    }
  }
}